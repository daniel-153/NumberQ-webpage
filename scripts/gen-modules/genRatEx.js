import*as H from"../helper-modules/gen-helpers.js";import*as PH from"../helper-modules/polynom-helpers.js";export default function genRatEx(){let o=H.removeFromArray(0,H.integerArray(-7,7)),a=H.randInt(0,1),i=H.randInt(0,1),l,t,e,r,n,m,P,y,d,p,T=(0===a?(l=H.randInt(-7,7),t=H.randFromList(o)):(t=H.randInt(-7,7),l=H.randFromList(o)),e=H.randFromList(o),r=H.randInt(-7,7),0===i?(n=H.randInt(-7,7),m=H.randFromList(o)):(m=H.randInt(-7,7),n=H.randFromList(o)),P=H.randFromList(o),y=H.randInt(-7,7),PH.polyTemplateToMath([l,t])),u=PH.polyTemplateToMath([e,r]),s=PH.polyTemplateToMath([n,m]),z=PH.polyTemplateToMath([P,y]),c=PH.factorBinomial(e,r)[0],h=PH.factorBinomial(P,y)[0],C=[e/c,-1*r/c,P/h,-1*y/h],f=[l*P+e*n,l*y+P*t+e*m+n*r,t*y+r*m],v=[e*P,e*y+P*r,r*y],M=PH.factorBinomial(f[0],f[1],f[2])[0],F=PH.factorBinomial(v[0],v[1],v[2])[0],A=PH.factorBinomial(f[0],f[1],f[2]).slice(1),q=PH.factorBinomial(v[0],v[1],v[2]).slice(1),x=-1*r/e,I=-1*y/P,B=PH.simplifyFraction(r,e).denom,L=PH.simplifyFraction(y,P).denom,N=B,g=(1===B?N="":-1===B&&(N="-"),L),j=(1===L?g="":-1===L&&(g="-"),PH.dividePolynomial(A,x).remainder),E=PH.dividePolynomial(A,I).remainder,R=PH.simplifyFraction(M,F).numer,w=PH.simplifyFraction(M,F).denom;1===w&&(w="");let b,k;return 0!==j&&0!==E?(b=PH.polyTemplateToMath(PH.multiplyArray(A,R)),k=w+PH.convertFactoredToMath(PH.factoredFormTemplate(C))):0===j&&0!==E?(b=PH.polyTemplateToMath(PH.multiplyArray(PH.dividePolynomial(PH.multiplyArray(A,R),x).quotient,1/B)),k=PH.polyTemplateToMath(PH.dividePolynomial(q,x).quotient)===N+"x"?w+"x":w+"("+PH.polyTemplateToMath(PH.multiplyArray(PH.dividePolynomial(q,x).quotient,1/B))+")"):0!==j&&0===E?(b=PH.polyTemplateToMath(PH.multiplyArray(PH.dividePolynomial(PH.multiplyArray(A,R),I).quotient,1/L)),k=PH.polyTemplateToMath(PH.dividePolynomial(q,I).quotient)===g+"x"?w+"x":w+"("+PH.polyTemplateToMath(PH.multiplyArray(PH.dividePolynomial(q,I).quotient,1/L))+")"):0===j&&0===E&&0===PH.dividePolynomial(PH.dividePolynomial(A,x).quotient,I).remainder?(b=R+"",""===(k=w)&&(k="1")):0===j&&0===E&&(b=PH.polyTemplateToMath(PH.multiplyArray(PH.dividePolynomial(PH.multiplyArray(A,R),I).quotient,1/L)),k=PH.polyTemplateToMath(PH.dividePolynomial(q,I).quotient)===g+"x"?w+"x":w+"("+PH.polyTemplateToMath(PH.multiplyArray(PH.dividePolynomial(q,I).quotient,1/L))+")"),d="\\frac{"+T+"}{"+u+"}+\\frac{"+s+"}{"+z+"}",p="\\frac{"+b+"}{"+k+"}","1"===k&&(p=b),(p="NaNx^2NaNxNaN"===b?"0":p).includes(".")?genRatEx():{question:d,answer:p}}